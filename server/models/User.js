import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const userSchema = new mongoose.Schema(
  {
    username: {
      type: String,
      required: true,
      unique: true,
      trim: true,
    },
    name: {
      type: String,
      required: true,
      trim: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    password: {
      type: String,
      required: true,
    },
    plainPassword: {
      type: String,
      required: true,
    },
    phoneNumber: {
      type: String,
      trim: true,
    },
    role: {
      type: String,
      enum: ["client", "employee", "admin"],
      default: "client",
    },
    clientId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "ClientProfile",
    },
    assignedClients: [{
      type: mongoose.Schema.Types.ObjectId,
      ref: "ClientProfile",
    }],
    isActive: {
      type: Boolean,
      default: true,
    },
    resetPasswordToken: String,
    resetPasswordExpires: Date,
  },
  {
    timestamps: true,
  }
);

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) {
    return next();
  }

  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

userSchema.methods.comparePassword = async function (candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.password);
};

userSchema.methods.toSafeObject = function () {
  const obj = this.toObject();
  delete obj.password;
  delete obj.plainPassword;
  delete obj.resetPasswordToken;
  delete obj.resetPasswordExpires;
  return obj;
};

const User = mongoose.model("User", userSchema);

export default User;

// import mongoose from "mongoose";

// const { Schema, model } = mongoose;

// const roles = ["admin", "employee", "client"];

// const UserSchema = new Schema(
//   {
//     username: {
//       type: String,
//       required: true,
//       unique: true,
//       lowercase: true,
//       trim: true,
//       minlength: 3,
//     },
//     email: {
//       type: String,
//       required: true,
//       unique: true,
//       lowercase: true,
//       trim: true,
//       match: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
//     },
//     name: { type: String, required: true, trim: true },
//     phoneNumber: { type: String, trim: true },
//     role: { type: String, enum: roles, default: "client", index: true },
//     isActive: { type: Boolean, default: true },
//     passwordHash: { type: String, required: true, select: false },
//     passwordPlain: { type: String, required: true, select: false },
//     passwordAutoGenerated: { type: Boolean, default: false },
//     resetTokenHash: { type: String, select: false },
//     resetTokenExpires: { type: Date, select: false },
//     assignedClients: [
//       {
//         type: Schema.Types.ObjectId,
//         ref: "Client",
//       },
//     ],
//   },
//   { timestamps: true },
// );

// UserSchema.methods.toSafeObject = function toSafeObject(includePlain = false) {
//   const base = {
//     id: this._id,
//     username: this.username,
//     email: this.email,
//     name: this.name,
//     phoneNumber: this.phoneNumber,
//     role: this.role,
//     isActive: this.isActive,
//     createdAt: this.createdAt,
//     updatedAt: this.updatedAt,
//     passwordAutoGenerated: this.passwordAutoGenerated,
//   };
//   if (includePlain) {
//     base.passwordPlain = this.passwordPlain;
//   }
//   return base;
// };

// export default mongoose.models.User || model("User", UserSchema);
