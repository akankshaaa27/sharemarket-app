import express from "express";
import Client from "../models/Client.js";
import User from "../models/User.js";
import ClientProfile from "../models/ClientProfile.js";
import { authenticate, requireRole } from "../middleware/auth.js";
import {
  hashPassword,
  generateRandomPassword,
  generateUsernameFromName,
} from "../utils/password.js";
import { sendCredentialsEmail } from "../utils/email.js";

const router = express.Router();

function mapUser(user, includePlain = false) {
  if (!user) return null;
  if (typeof user.toSafeObject === "function") {
    return user.toSafeObject(includePlain);
  }
  return {
    id: user._id,
    username: user.username,
    email: user.email,
    name: user.name,
    phoneNumber: user.phoneNumber,
    role: user.role,
    createdAt: user.createdAt,
    updatedAt: user.updatedAt,
    passwordAutoGenerated: user.passwordAutoGenerated,
    ...(includePlain ? { passwordPlain: user.passwordPlain } : {}),
  };
}

function canManageClient(user, client) {
  if (!user || !client) return false;
  if (user.role === "admin") return true;
  if (user.role === "employee" && client.assignedTo && client.assignedTo.equals(user._id)) {
    return true;
  }
  if (user.role === "client" && client.user.equals(user._id)) {
    return true;
  }
  return false;
}

router.use(authenticate);

router.get("/", async (req, res) => {
  const { page = 1, limit = 20, q = "" } = req.query;
  const pageNumber = Math.max(parseInt(page, 10), 1);
  const pageSize = Math.min(Math.max(parseInt(limit, 10), 1), 100);

  const filter = {};
  if (q) {
    filter.$or = [
      { notes: { $regex: q, $options: "i" } },
    ];
  }

  if (req.user.role === "employee") {
    filter.assignedTo = req.user._id;
  }
  if (req.user.role === "client") {
    filter.user = req.user._id;
  }

  const [clients, total] = await Promise.all([
    Client.find(filter)
      .populate("user")
      .populate("assignedTo", "name email")
      .populate("profile")
      .sort({ createdAt: -1 })
      .skip((pageNumber - 1) * pageSize)
      .limit(pageSize),
    Client.countDocuments(filter),
  ]);

  return res.json({
    data: clients.map((client) => ({
      id: client._id,
      user: mapUser(client.user),
      assignedTo: client.assignedTo
        ? {
            id: client.assignedTo._id,
            name: client.assignedTo.name,
            email: client.assignedTo.email,
          }
        : null,
      status: client.status,
      notes: client.notes,
      profileId: client.profile,
      createdAt: client.createdAt,
      updatedAt: client.updatedAt,
    })),
    page: pageNumber,
    limit: pageSize,
    total,
  });
});

router.post("/", requireRole("admin", "employee"), async (req, res) => {
  const { user: userPayload = {}, client: clientPayload = {}, profile: profilePayload = {} } =
    req.body || {};

  if (!userPayload.email || !userPayload.name) {
    return res.status(400).json({ error: "Client name and email are required" });
  }

  const existingUser = await User.findOne({ email: userPayload.email.toLowerCase() });
  if (existingUser) {
    return res.status(409).json({ error: "A user with this email already exists" });
  }

  let generatedUsername = (userPayload.username || generateUsernameFromName(userPayload.name)).toLowerCase();
  while (await User.exists({ username: generatedUsername })) {
    generatedUsername = generateUsernameFromName(userPayload.name).toLowerCase();
  }

  let password = userPayload.password;
  let autoGenerated = false;
  if (!password) {
    password = generateRandomPassword();
    autoGenerated = true;
  }

  const passwordHash = await hashPassword(password);

  let createdUser;
  let createdClient;
  let createdProfile;
  try {
    createdUser = await User.create({
      username: generatedUsername,
      email: userPayload.email.toLowerCase(),
      name: userPayload.name,
      phoneNumber: userPayload.phoneNumber,
      role: "client",
      passwordHash,
      passwordPlain: password,
      passwordAutoGenerated: autoGenerated,
    });

    let assignedTo = clientPayload.assignedTo;
    if (!assignedTo && req.user.role === "employee") {
      assignedTo = req.user._id;
    }

    createdClient = await Client.create({
      user: createdUser._id,
      status: clientPayload.status || "active",
      assignedTo,
      notes: clientPayload.notes,
    });

    createdProfile = await ClientProfile.create({
      ...profilePayload,
      client: createdClient._id,
    });

    createdClient.profile = createdProfile._id;
    await createdClient.save();

    await sendCredentialsEmail({
      to: createdUser.email,
      name: createdUser.name,
      username: createdUser.username,
      password,
    });
  } catch (error) {
    if (createdProfile) await createdProfile.deleteOne();
    if (createdClient) await createdClient.deleteOne();
    if (createdUser) await createdUser.deleteOne();
    throw error;
  }

  return res.status(201).json({
    client: {
      id: createdClient._id,
      user: mapUser(createdUser, true),
      status: createdClient.status,
      notes: createdClient.notes,
      assignedTo: createdClient.assignedTo,
      profileId: createdProfile._id,
    },
    password,
  });
});

router.get("/:id", async (req, res) => {
  const client = await Client.findById(req.params.id)
    .populate("user")
    .populate("assignedTo", "name email")
    .populate("profile");
  if (!client) return res.status(404).json({ error: "Client not found" });

  if (!canManageClient(req.user, client)) {
    return res.status(403).json({ error: "Insufficient permissions" });
  }

  return res.json({
    client: {
      id: client._id,
      status: client.status,
      notes: client.notes,
      assignedTo: client.assignedTo
        ? { id: client.assignedTo._id, name: client.assignedTo.name, email: client.assignedTo.email }
        : null,
      user: mapUser(client.user, req.user.role === "admin"),
      profile: client.profile,
    },
  });
});

router.put("/:id", requireRole("admin", "employee"), async (req, res) => {
  const client = await Client.findById(req.params.id);
  if (!client) return res.status(404).json({ error: "Client not found" });

  if (!canManageClient(req.user, client)) {
    return res.status(403).json({ error: "Insufficient permissions" });
  }

  const { status, notes, assignedTo } = req.body || {};
  if (status) client.status = status;
  if (notes !== undefined) client.notes = notes;
  if (assignedTo !== undefined) client.assignedTo = assignedTo;
  await client.save();

  return res.json({
    client: {
      id: client._id,
      status: client.status,
      notes: client.notes,
      assignedTo: client.assignedTo,
    },
  });
});

router.delete("/:id", requireRole("admin"), async (req, res) => {
  const client = await Client.findById(req.params.id);
  if (!client) return res.status(404).json({ error: "Client not found" });

  const user = await User.findById(client.user);
  const profile = await ClientProfile.findById(client.profile);

  await client.deleteOne();
  if (profile) await profile.deleteOne();
  if (user) await user.deleteOne();

  return res.json({ success: true });
});

export default router;
